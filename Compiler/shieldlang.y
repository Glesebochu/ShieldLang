/* Definitions Section */
%{
#include <iostream> // Include iostream for input/output operations
#include <cstdlib>  // Include cstdlib for general-purpose functions (e.g., atoi, atof)
#include <cstdio>   // Include cstdio for file input/output functions
using namespace std;

// Function prototypes
void yyerror(const char *s); // Function for error handling
extern int yylex();          // Function generated by Flex to tokenize input
extern int linenum;          // Variable to keep track of line numbers
extern FILE *yyin;           // Variable to point to the input file
%}

// Define YYSTYPE to include different types
%union {
    int ival;
    float fval;
    char *sval;
}

/* Declare tokens to be used by Bison */
%token <ival> INTEGER 
%token <fval> FLOAT 
%token <sval> STRING 
%token TEST
%token NEWLINE 

/* Rules Section */
%%
/* Define the start rule and other grammar rules */

/* The input rule matches the entire input. It consists of zero or more lines. */
input:
      | input line     // Input can be empty or can contain multiple lines
      ;

/* The line rule matches a single line. */
line:
      NEWLINE              // A line can be just a newline character
    | expression NEWLINE   // Or a line can be an expression followed by a newline
      {
          cout << "Expression evaluated successfully." << endl;
      }
    ;

/* Define the expression rule for different types of expressions. */
expression:
      INTEGER { 
          cout << "Integer value: " << $1 << endl; 
      }
    | FLOAT { 
          cout << "Float value: " << $1 << endl; 
      }
    | TEST { 
          cout << "Test command detected." << endl; 
      }
    | STRING { 
          cout << "String detected: " << $1 << endl; 
      }
    ;

%%

/* User Code Section */

/* Function for handling errors, called by Bison when a syntax error is encountered */
void yyerror(const char *s)
{
    cerr << "Error: " << s << " at line " << linenum << endl;
}

/* Main function */
int main(int argc, char **argv)
{
    // If a filename is provided as a command-line argument, open the file
    if (argc > 1)
    {
        FILE *file = fopen(argv[1], "r");
        if (!file)
        {
            // If the file cannot be opened, print an error message and exit
            cerr << "Could not open file: " << argv[1] << endl;
            return 1;
        }
        // Set yyin to the file pointer so Flex reads from the file
        yyin = file;
    }
    else
    {
        // If no file is provided, read from standard input (e.g., keyboard)
        yyin = stdin;
    }
    // Call yyparse to start parsing the input
    yyparse();
    return 0;
}
